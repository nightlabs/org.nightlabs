/* *****************************************************************************
 * NightLabs Editor2D - Graphical editor framework                             *
 * Copyright (C) 2004-2005 NightLabs - http://NightLabs.org                    *
 *                                                                             *
 * This library is free software; you can redistribute it and/or               *
 * modify it under the terms of the GNU Lesser General Public                  *
 * License as published by the Free Software Foundation; either                *
 * version 2.1 of the License, or (at your option) any later version.          *
 *                                                                             *
 * This library is distributed in the hope that it will be useful,             *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of              *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU           *
 * Lesser General Public License for more details.                             *
 *                                                                             *
 * You should have received a copy of the GNU Lesser General Public            *
 * License along with this library; if not, write to the                       *
 *     Free Software Foundation, Inc.,                                         *
 *     51 Franklin St, Fifth Floor,                                            *
 *     Boston, MA  02110-1301  USA                                             *
 *                                                                             *
 * Or get it online :                                                          *
 *     http://www.gnu.org/copyleft/lesser.html                                 *
 *                                                                             *
 *                                                                             *
 ******************************************************************************/
package org.nightlabs.editor2d.iofilter;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;

import javax.naming.OperationNotSupportedException;

import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.batik.util.SVGConstants;
import org.apache.batik.util.XMLConstants;
import org.apache.log4j.Logger;
import org.nightlabs.editor2d.DrawComponent;
import org.nightlabs.editor2d.iofilter.svg.EditorStyleSheetHandler;
import org.nightlabs.editor2d.iofilter.svg.SVGPainter;
import org.nightlabs.io.AbstractSingleFileExtensionIOFilter;
import org.nightlabs.io.ReadException;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;

/**
 * @author Daniel.Mazurek <at> NightLabs <dot> de
 *
 */
public abstract class AbstractSVGFilter
extends AbstractSingleFileExtensionIOFilter
implements XMLConstants, SVGConstants
{
	private static final Logger logger = Logger.getLogger(AbstractSVGFilter.class);
	
	public static final String DEFAULT_ENCODING = "UTF-8";
	
	public AbstractSVGFilter() {
		super();
	}
	
	private String encoding = DEFAULT_ENCODING;
	public String getEncoding() {
		return encoding;
	}
	public void setEncoding(String encoding) {
		this.encoding = encoding;
	}
	
	public Object read(InputStream in)
	throws IOException
	{
		throw new ReadException("Operation not supported", new OperationNotSupportedException());
	}

	public void write(Object o, OutputStream out)
	throws IOException
	{
		long startTime = System.currentTimeMillis();
		if (o instanceof DrawComponent)
		{
			DrawComponent dc = (DrawComponent) o;
      getPainter().paintDrawComponent(dc, getSVGGraphics2D());
      writeSVG(out);
      out.close();
		}
		long duration = System.currentTimeMillis() - startTime;
		logger.debug("svg write took "+duration+" ms!");
	}

	private Document document = null;
	protected Document getDocument()
	{
		if (document == null)
			document = createDocument();
		return document;
	}
	protected Document createDocument()
	{
    // Get a DOMImplementation
    DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();
    // Create an instance of org.w3c.dom.Document
    return domImpl.createDocument(null, getFileExtensions()[0], null);
	}
	
	private SVGGeneratorContext ctx = null;
	protected SVGGeneratorContext getSVGGeneratorContext() {
		if (ctx == null)
			ctx = createSVGGeneratorContext();
		return ctx;
	}
	protected SVGGeneratorContext createSVGGeneratorContext()
	{
		SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(getDocument());
		ctx.setStyleHandler(new EditorStyleSheetHandler(getPainter()));
		ctx.setComment("Generated by the JFire Editor2D");
//    ctx.setIDGenerator(new EditorSVGIDGenerator());
//    ctx.setImageHandler(new ImageHandlerPNGEncoder(Utils.getTempDir().getAbsolutePath(), null));
		return ctx;
	}
	
	private SVGGraphics2D svgGraphics = null;
	protected SVGGraphics2D getSVGGraphics2D() {
		if (svgGraphics == null)
			svgGraphics = createSVGGraphics2D();
		return svgGraphics;
	}
	protected SVGGraphics2D createSVGGraphics2D() {
		return new SVGGraphics2D(getSVGGeneratorContext(), isTextAsShape());
	}
	
	private SVGPainter painter = null;
	protected SVGPainter getPainter() {
		if (painter == null)
			painter = new SVGPainter();
		return painter;
	}
	
	private boolean textAsShape = true;
	public boolean isTextAsShape() {
		return textAsShape;
	}
	public void setTextAsShape(boolean textAsShape) {
		this.textAsShape = textAsShape;
	}
	
	private boolean useCSS = true;
	public boolean isUseCSS() {
		return useCSS;
	}
	public void setUseCSS(boolean useCSS) {
		this.useCSS = useCSS;
	}
			
	protected void writeSVG(OutputStream out)
	throws IOException
	{
    Writer w = new OutputStreamWriter(out, getEncoding());
    getSVGGraphics2D().stream(w, isUseCSS());
	}
	
	@Override
	protected boolean supportsRead() {
		return false;
	}
	
	@Override
	protected boolean supportsWrite() {
		return true;
	}
}
