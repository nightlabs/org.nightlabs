<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.nightlabs.base">
<annotation>
      <appInfo>
         <meta.schema plugin="org.nightlabs.base" id="entityEditor" name="org.nightlabs.base.entityEditor"/>
      </appInfo>
      <documentation>
         [Enter description of this extension point.]
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="category" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="pageFactory" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="viewBinding" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="category">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name" icon="icon"/>
         </appInfo>
         <documentation>
            By this element categories can be defined that can be bound to Views.
There is one required attributes for this element: class. The others are optional as they are also defined by IEntityTreeCategory and the implementations are responsible of returning correct values. 
Note however, that if you pass a subclass of the abstract EntityTreeCategory 
the values defined in the extension will automatically set for this category.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="viewBinding" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  The unique id of this category.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  A name for this category.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  An icon for this category.
               </documentation>
               <appInfo>
                  <meta.attribute kind="resource"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The fully qualified class-name of an implementation of IEntityTreeCategory
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.nightlabs.base.entity.tree.IEntityTreeCategory"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="pageFactory">
      <annotation>
         <documentation>
            By this element editor pages can be registered that will be displayed in the FormEditor referenced by the editorID attribute. You need to register a factory that will create the pages when necessary, not the pages themselves.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The fully qualified class-name of an implementation of IEntityEditorPageFactory the factory that will create an IFormPage when necessary.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.nightlabs.base.entity.editor.IEntityEditorPageFactory"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="editorID" type="string" use="required">
            <annotation>
               <documentation>
                  The id of the editor this page should appear in.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="indexHint" type="string">
            <annotation>
               <documentation>
                  A hint for positioning this page in the editor&apos;s tab-order.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="viewBinding">
      <annotation>
         <documentation>
            By this element categories can be bound to views. A category bound to a view will be typically displayed in a tree viewer along with other categories.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  Optional implementation of IEntityTreeCategoryViewBinding. If omitted, a default implementation will be instantiated that delegates its work to the category it is bound to.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.nightlabs.base.entity.tree.IEntityTreeCategoryViewBinding"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="category" type="string">
            <annotation>
               <documentation>
                  Optional id of the category that should be bound. This has to be defined if you want to reference a category that is defined somewhere else. Leave this blank, if you are defining the binding wrapped into an category-element, the binding will then be on the surrounding category.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="viewID" type="string" use="required">
            <annotation>
               <documentation>
                  The id of the view the category should be bound to.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="editorID" type="string" use="required">
            <annotation>
               <documentation>
                  The id of the Editor to open for an entity of the category bound in this binding.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  Optional name. Can be used to overwrite the name of the category for this binding.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="indexHint" type="string">
            <annotation>
               <documentation>
                  A hint for positioning the category in the view it is bound to.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  Optional icon. Can be used to overwrite the icon of the category for this binding.
               </documentation>
               <appInfo>
                  <meta.attribute kind="resource"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

</schema>
